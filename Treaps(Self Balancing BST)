//Suppose there is a map [a->b] you have array of a and you update it dynamically.
//If you want sum of b's for all a's less than sum x(Query) then this data strcuture provides logn TC
//The Data structure is storing the sum of left subtree of BST also 
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int key;
    long long val;
    int prior;
    Node *l, *r;
    long long sum; // sum of subtree

    Node(int _key, long long _val) {
        key = _key;
        val = _val;
        prior = rand();
        l = r = nullptr;
        sum = val;
    }
};

long long getSum(Node* t) {
    return t ? t->sum : 0;
}

void update(Node* t) {
    if (!t) return;
    t->sum = (t->val + getSum(t->l) + getSum(t->r))%(1000000007);
}

void split(Node* t, int key, Node*& l, Node*& r) {
    if (!t) l = r = nullptr;
    else if (key <= t->key) {
        split(t->l, key, l, t->l);
        r = t;
        update(r);
    } else {
        split(t->r, key, t->r, r);
        l = t;
        update(l);
    }
}

void merge(Node*& t, Node* l, Node* r) {
    if (!l || !r) t = l ? l : r;
    else if (l->prior > r->prior) {
        merge(l->r, l->r, r);
        t = l;
        update(t);
    } else {
        merge(r->l, l, r->l);
        t = r;
        update(t);
    }
}

void insert(Node*& t, Node* it) {
    if (!t) {
        t = it;
        return;
    }
    if (it->prior > t->prior) {
        split(t, it->key, it->l, it->r);
        t = it;
    } else if (it->key < t->key) insert(t->l, it);
    else if (it->key > t->key) insert(t->r, it);
    else {
        // key already exists: update val
        t->val += it->val;
        delete it;
    }
    update(t);
}

long long query(Node* t, int key) {
    if (!t) return 0;
    if (key <= t->key)
        return query(t->l, key);
    else
        return (getSum(t->l) + t->val + query(t->r, key))%(1000000007);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
 
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
 
    Node* root = nullptr;
    int n;
    cin >> n;
    vector<int> inputs(n);
    for(int i=0;i<n;i++){
      cin >> inputs[i];
    }
    int sum=0;
    for (int x : inputs) {
        long long sumLess = query(root, x);   // sum of keys < x
        long long valToInsert = (sumLess + 1)%(1000000007);  // value to insert
        sum= (sum+valToInsert)%(1000000007);

        insert(root, new Node(x, valToInsert));
    }
    cout << sum;

    return 0;
}
