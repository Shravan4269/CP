#include <iostream>
#include<vector>
using namespace std;

typedef long long ll;
int mod =   1e9 + 7;

long long binpow(long long a, long long b, long long p) {
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = (res * a)%p;
        a = (a * a)%p;
        b >>= 1;
    }
    return res;
}

ll sum_(int p,int a){
    ll num = (binpow(p,a+1,mod)-1 + mod)%mod;
    ll denom_inv = binpow(p-1,mod-2,mod);
    return (num*denom_inv)%mod;
}

int main()
{
    int n;
    cin >> n;
    vector <int> prime(n);
    vector <int> power(n);
    int odd_index = -1;
    for(int i =0;i<n;i++){
        cin >> prime[i] >> power[i];
        if(power[i]%2) odd_index = i;
    }
    ll num_of_divisor = 1;
    ll sum_of_divisors = 1;
    ll _num_ =1;
    for(int i =0;i<n;i++){
        num_of_divisor = (num_of_divisor*(power[i]+1))%mod;
        sum_of_divisors = (sum_of_divisors*(sum_(prime[i],power[i])))%mod;
        if(odd_index!=-1){
            if(i==odd_index){
                _num_ = (_num_*(power[i]+1)/2)%(mod-1);
            }
            else _num_ = (_num_*(power[i]+1))%(mod-1);
        }
        else _num_ = (_num_*(power[i]+1))%(mod-1);
    }     
    ll product_of_divisors = 1;
    if(odd_index==-1){
        for(int i=0;i<n;i++){
            ll product = (power[i]*_num_/2)%(mod-1);
            product_of_divisors = (product_of_divisors*binpow(prime[i],product,mod))%mod;
        }
    }
    else {
        for(int i=0;i<n;i++){
            ll product = (power[i]*_num_)%(mod-1);
            product_of_divisors = (product_of_divisors*binpow(prime[i],product,mod))%mod;
        }
    }
    cout << num_of_divisor <<" " << sum_of_divisors << " " << product_of_divisors ;
}
